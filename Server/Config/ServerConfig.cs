using System;
using System.IO;
using MirageMUD.Shared.Security;
using MirageMUD.Shared.Utilities;

namespace MirageMUD.Server.Config
{
    public sealed class ServerConfig
    {
        public string ListenIp { get; set; } = "0.0.0.0";
        public int Port { get; set; } = 7777;
        public int MaxConnections { get; set; } = 512;

        public bool EnableEncryption { get; set; } = true;

        // 32-byte key (Base64) for AES-GCM. Autogenerated on first run if blank.
        public string EncryptionKeyBase64 { get; set; } = "";

        public string LogDirectory { get; set; } =
            System.IO.Path.Combine(BaseDir, "logs");

        // If you add DB later:
        public string? DatabaseConnectionString { get; set; }

        public static string BaseDir =>
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "MirageMUD", "Server");

        public static string PathFile => System.IO.Path.Combine(BaseDir, "server.config.json");

        public static ServerConfig Load()
        {
            var cfg = JsonConfig.LoadOrCreate(PathFile, () => new ServerConfig());
            if (string.IsNullOrWhiteSpace(cfg.EncryptionKeyBase64))
            {
                cfg.EncryptionKeyBase64 = CryptoService.GenerateKeyBase64();
                cfg.Save(); // persist the generated key
            }
            Directory.CreateDirectory(cfg.LogDirectory);
            return cfg;
        }

        public void Save() => JsonConfig.Save(PathFile, this);

        public byte[] GetEncryptionKey() => CryptoService.KeyFromBase64(EncryptionKeyBase64);
    }
}